// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: store.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoreMetadata struct {
	Version              int32    `protobuf:"varint,1,req,name=version" json:"version"`
	TotalTransactions    uint64   `protobuf:"varint,2,req,name=total_transactions,json=totalTransactions" json:"total_transactions"`
	WatcherCount         uint64   `protobuf:"varint,3,req,name=watcher_count,json=watcherCount" json:"watcher_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreMetadata) Reset()         { *m = StoreMetadata{} }
func (m *StoreMetadata) String() string { return proto.CompactTextString(m) }
func (*StoreMetadata) ProtoMessage()    {}
func (*StoreMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_98bbca36ef968dfc, []int{0}
}
func (m *StoreMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreMetadata.Merge(m, src)
}
func (m *StoreMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StoreMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StoreMetadata proto.InternalMessageInfo

type NodeData struct {
	Path                 string     `protobuf:"bytes,1,req,name=path" json:"path"`
	CreatedIndex         uint64     `protobuf:"varint,2,req,name=created_index,json=createdIndex" json:"created_index"`
	ModifiedIndex        uint64     `protobuf:"varint,3,req,name=modified_index,json=modifiedIndex" json:"modified_index"`
	Value                *string    `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	IsDir                bool       `protobuf:"varint,5,req,name=is_dir,json=isDir" json:"is_dir"`
	ExpireUnix           *int64     `protobuf:"varint,6,opt,name=expire_unix,json=expireUnix" json:"expire_unix,omitempty"`
	Acl                  string     `protobuf:"bytes,7,req,name=acl" json:"acl"`
	Children             []NodeData `protobuf:"bytes,8,rep,name=children" json:"children"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeData) Reset()         { *m = NodeData{} }
func (m *NodeData) String() string { return proto.CompactTextString(m) }
func (*NodeData) ProtoMessage()    {}
func (*NodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_98bbca36ef968dfc, []int{1}
}
func (m *NodeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeData.Merge(m, src)
}
func (m *NodeData) XXX_Size() int {
	return m.Size()
}
func (m *NodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeData.DiscardUnknown(m)
}

var xxx_messageInfo_NodeData proto.InternalMessageInfo

type StoreSnapshot struct {
	BaseIndex            uint64        `protobuf:"varint,1,req,name=base_index,json=baseIndex" json:"base_index"`
	CurrentIndex         uint64        `protobuf:"varint,2,req,name=current_index,json=currentIndex" json:"current_index"`
	Metadata             StoreMetadata `protobuf:"bytes,5,req,name=metadata" json:"metadata"`
	RootNode             NodeData      `protobuf:"bytes,6,req,name=root_node,json=rootNode" json:"root_node"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StoreSnapshot) Reset()         { *m = StoreSnapshot{} }
func (m *StoreSnapshot) String() string { return proto.CompactTextString(m) }
func (*StoreSnapshot) ProtoMessage()    {}
func (*StoreSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_98bbca36ef968dfc, []int{2}
}
func (m *StoreSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSnapshot.Merge(m, src)
}
func (m *StoreSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *StoreSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSnapshot proto.InternalMessageInfo

type CompressedSnapshot struct {
	BaseIndex            uint64   `protobuf:"varint,1,req,name=base_index,json=baseIndex" json:"base_index"`
	CurrentIndex         uint64   `protobuf:"varint,2,req,name=current_index,json=currentIndex" json:"current_index"`
	CompressedData       []byte   `protobuf:"bytes,3,req,name=compressed_data,json=compressedData" json:"compressed_data"`
	OriginalSize         uint32   `protobuf:"varint,4,req,name=original_size,json=originalSize" json:"original_size"`
	CompressionType      string   `protobuf:"bytes,5,req,name=compression_type,json=compressionType" json:"compression_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompressedSnapshot) Reset()         { *m = CompressedSnapshot{} }
func (m *CompressedSnapshot) String() string { return proto.CompactTextString(m) }
func (*CompressedSnapshot) ProtoMessage()    {}
func (*CompressedSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_98bbca36ef968dfc, []int{3}
}
func (m *CompressedSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompressedSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompressedSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompressedSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompressedSnapshot.Merge(m, src)
}
func (m *CompressedSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *CompressedSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CompressedSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CompressedSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreMetadata)(nil), "storepb.StoreMetadata")
	proto.RegisterType((*NodeData)(nil), "storepb.NodeData")
	proto.RegisterType((*StoreSnapshot)(nil), "storepb.StoreSnapshot")
	proto.RegisterType((*CompressedSnapshot)(nil), "storepb.CompressedSnapshot")
}

func init() { proto.RegisterFile("store.proto", fileDescriptor_98bbca36ef968dfc) }

var fileDescriptor_98bbca36ef968dfc = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x4f, 0x6e, 0xdb, 0x3c,
	0x10, 0xc5, 0x2d, 0xf9, 0xff, 0xd8, 0x4e, 0xbe, 0x10, 0x46, 0x20, 0x7c, 0x05, 0x14, 0xc1, 0xdd,
	0x28, 0x28, 0xea, 0x00, 0x49, 0x17, 0x5d, 0x27, 0xd9, 0x74, 0xd1, 0x2e, 0xec, 0x74, 0x2d, 0x30,
	0xd2, 0xd4, 0x26, 0x20, 0x93, 0x02, 0x49, 0xa7, 0x4e, 0x2e, 0xd1, 0x13, 0xf4, 0x3e, 0xde, 0x35,
	0x27, 0x28, 0x1a, 0x5f, 0xa0, 0x57, 0x28, 0x28, 0x91, 0xae, 0x02, 0xb4, 0xcb, 0xee, 0xa4, 0xf7,
	0x7e, 0x24, 0xe7, 0xcd, 0x0c, 0x0c, 0x94, 0x16, 0x12, 0xa7, 0x85, 0x14, 0x5a, 0x90, 0x6e, 0xf9,
	0x53, 0xdc, 0xfe, 0x3f, 0x5e, 0x88, 0x85, 0x28, 0xb5, 0x33, 0xf3, 0x55, 0xd9, 0x93, 0x2f, 0x1e,
	0x8c, 0xe6, 0x86, 0x78, 0x8f, 0x9a, 0x66, 0x54, 0x53, 0x12, 0x42, 0xf7, 0x0e, 0xa5, 0x62, 0x82,
	0x07, 0x5e, 0xe4, 0xc7, 0xed, 0xcb, 0xd6, 0xf6, 0xfb, 0x49, 0x63, 0xe6, 0x44, 0x72, 0x01, 0x44,
	0x0b, 0x4d, 0xf3, 0x44, 0x4b, 0xca, 0x15, 0x4d, 0x35, 0x13, 0x5c, 0x05, 0x7e, 0xe4, 0xc7, 0x2d,
	0x8b, 0x1e, 0x95, 0xfe, 0x4d, 0xcd, 0x26, 0xa7, 0x30, 0xfa, 0x4c, 0x75, 0xba, 0x44, 0x99, 0xa4,
	0x62, 0xcd, 0x75, 0xd0, 0xac, 0xf1, 0x43, 0x6b, 0x5d, 0x19, 0x67, 0xf2, 0xd5, 0x87, 0xde, 0x07,
	0x91, 0xe1, 0xb5, 0x29, 0x26, 0x80, 0x56, 0x41, 0xf5, 0xb2, 0xac, 0xa4, 0x6f, 0xf1, 0x52, 0x31,
	0x37, 0xa6, 0x12, 0xa9, 0xc6, 0x2c, 0x61, 0x3c, 0xc3, 0xcd, 0xb3, 0x0a, 0x86, 0xd6, 0x7a, 0x67,
	0x1c, 0xf2, 0x0a, 0x0e, 0x56, 0x22, 0x63, 0x9f, 0xd8, 0x9e, 0xad, 0xbf, 0x3e, 0x72, 0x5e, 0x05,
	0x8f, 0xa1, 0x7d, 0x47, 0xf3, 0x35, 0x06, 0xad, 0xc8, 0x8b, 0xfb, 0xb3, 0xea, 0x87, 0xbc, 0x80,
	0x0e, 0x53, 0x49, 0xc6, 0x64, 0xd0, 0x8e, 0xfc, 0xb8, 0x67, 0x8f, 0xb6, 0x99, 0xba, 0x66, 0x92,
	0x9c, 0xc0, 0x00, 0x37, 0x05, 0x93, 0x98, 0xac, 0x39, 0xdb, 0x04, 0x9d, 0xc8, 0x8b, 0x9b, 0x33,
	0xa8, 0xa4, 0x8f, 0x9c, 0x6d, 0xc8, 0x31, 0x34, 0x69, 0x9a, 0x07, 0xdd, 0x5a, 0x08, 0x23, 0x90,
	0x0b, 0xe8, 0xa5, 0x4b, 0x96, 0x67, 0x12, 0x79, 0xd0, 0x8b, 0x9a, 0xf1, 0xe0, 0xfc, 0x68, 0x6a,
	0xc7, 0x35, 0x75, 0x2d, 0xb0, 0xfc, 0x1e, 0x9c, 0x7c, 0x73, 0x13, 0x9b, 0x73, 0x5a, 0xa8, 0xa5,
	0xd0, 0xe4, 0x25, 0xc0, 0x2d, 0x55, 0x68, 0xb3, 0x79, 0xb5, 0x6c, 0x7d, 0xa3, 0x57, 0xb9, 0x4c,
	0xbf, 0xd6, 0x52, 0x22, 0xd7, 0x7f, 0xec, 0x57, 0x65, 0x55, 0xe8, 0x5b, 0xe8, 0xad, 0xec, 0x36,
	0x94, 0x71, 0x07, 0xe7, 0xc7, 0xfb, 0xb2, 0x9e, 0xed, 0x8a, 0xab, 0xcd, 0xd1, 0xe4, 0x0d, 0xf4,
	0xa5, 0x10, 0x3a, 0xe1, 0x22, 0xc3, 0xa0, 0x53, 0x1e, 0xfd, 0x7b, 0x22, 0x43, 0x1a, 0x6d, 0xf2,
	0xd3, 0x03, 0x72, 0x25, 0x56, 0x85, 0x44, 0xa5, 0x30, 0xfb, 0x67, 0xb1, 0x5e, 0xc3, 0x61, 0xba,
	0x7f, 0x25, 0x29, 0xd3, 0x99, 0x3d, 0x18, 0x5a, 0xf8, 0xe0, 0xb7, 0x59, 0xae, 0xde, 0x29, 0x8c,
	0x84, 0x64, 0x0b, 0xc6, 0x69, 0x9e, 0x28, 0xf6, 0x60, 0x16, 0xc2, 0x8f, 0x47, 0xee, 0x66, 0x67,
	0xcd, 0xd9, 0x03, 0x92, 0x33, 0xf8, 0xcf, 0x1d, 0x66, 0x82, 0x27, 0xfa, 0xbe, 0xc0, 0xb2, 0x71,
	0x6e, 0xd8, 0x87, 0x35, 0xf7, 0xe6, 0xbe, 0xc0, 0xcb, 0xf1, 0xf6, 0x29, 0x6c, 0x3c, 0x3e, 0x85,
	0x8d, 0xed, 0x2e, 0xf4, 0x1e, 0x77, 0xa1, 0xf7, 0x63, 0x17, 0x7a, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x62, 0x56, 0x99, 0x72, 0xb8, 0x03, 0x00, 0x00,
}

func (m *StoreMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintStore(dAtA, i, uint64(m.WatcherCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintStore(dAtA, i, uint64(m.TotalTransactions))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStore(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i -= len(m.Acl)
	copy(dAtA[i:], m.Acl)
	i = encodeVarintStore(dAtA, i, uint64(len(m.Acl)))
	i--
	dAtA[i] = 0x3a
	if m.ExpireUnix != nil {
		i = encodeVarintStore(dAtA, i, uint64(*m.ExpireUnix))
		i--
		dAtA[i] = 0x30
	}
	i--
	if m.IsDir {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintStore(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintStore(dAtA, i, uint64(m.ModifiedIndex))
	i--
	dAtA[i] = 0x18
	i = encodeVarintStore(dAtA, i, uint64(m.CreatedIndex))
	i--
	dAtA[i] = 0x10
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintStore(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StoreSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.RootNode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	i = encodeVarintStore(dAtA, i, uint64(m.CurrentIndex))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStore(dAtA, i, uint64(m.BaseIndex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CompressedSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressedSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompressedSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.CompressionType)
	copy(dAtA[i:], m.CompressionType)
	i = encodeVarintStore(dAtA, i, uint64(len(m.CompressionType)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintStore(dAtA, i, uint64(m.OriginalSize))
	i--
	dAtA[i] = 0x20
	if m.CompressedData != nil {
		i -= len(m.CompressedData)
		copy(dAtA[i:], m.CompressedData)
		i = encodeVarintStore(dAtA, i, uint64(len(m.CompressedData)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintStore(dAtA, i, uint64(m.CurrentIndex))
	i--
	dAtA[i] = 0x10
	i = encodeVarintStore(dAtA, i, uint64(m.BaseIndex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStore(uint64(m.Version))
	n += 1 + sovStore(uint64(m.TotalTransactions))
	n += 1 + sovStore(uint64(m.WatcherCount))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovStore(uint64(l))
	n += 1 + sovStore(uint64(m.CreatedIndex))
	n += 1 + sovStore(uint64(m.ModifiedIndex))
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovStore(uint64(l))
	}
	n += 2
	if m.ExpireUnix != nil {
		n += 1 + sovStore(uint64(*m.ExpireUnix))
	}
	l = len(m.Acl)
	n += 1 + l + sovStore(uint64(l))
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStore(uint64(m.BaseIndex))
	n += 1 + sovStore(uint64(m.CurrentIndex))
	l = m.Metadata.Size()
	n += 1 + l + sovStore(uint64(l))
	l = m.RootNode.Size()
	n += 1 + l + sovStore(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompressedSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStore(uint64(m.BaseIndex))
	n += 1 + sovStore(uint64(m.CurrentIndex))
	if m.CompressedData != nil {
		l = len(m.CompressedData)
		n += 1 + l + sovStore(uint64(l))
	}
	n += 1 + sovStore(uint64(m.OriginalSize))
	l = len(m.CompressionType)
	n += 1 + l + sovStore(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTransactions", wireType)
			}
			m.TotalTransactions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTransactions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherCount", wireType)
			}
			m.WatcherCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatcherCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("total_transactions")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("watcher_count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedIndex", wireType)
			}
			m.CreatedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedIndex", wireType)
			}
			m.ModifiedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireUnix", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireUnix = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, NodeData{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("path")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("created_index")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("modified_index")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_dir")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("acl")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSnapshot) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseIndex", wireType)
			}
			m.BaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("base_index")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("current_index")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metadata")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("root_node")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressedSnapshot) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressedSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressedSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseIndex", wireType)
			}
			m.BaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressedData = append(m.CompressedData[:0], dAtA[iNdEx:postIndex]...)
			if m.CompressedData == nil {
				m.CompressedData = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSize", wireType)
			}
			m.OriginalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("base_index")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("current_index")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("compressed_data")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("original_size")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("compression_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
